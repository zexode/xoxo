# Приветственное сообщение и объяснение правил
a = 'Добро пожаловать в игру Крестики-Нолики!'
b = 'Правила игры:'  # Описание правил
c = ('Играют два игрока. Они по очереди ставят на свободные клетки поля 3х3 знаки (один всегда крестики, '
     'другой всегда нолики). Первый, выстроивший в ряд 3 своих знака по вертикали, горизонтали или диагонали, выигрывает.')
# Вывод приветствия и правил на экран
print(a)
print(b)
print(c)

# Настройка игрового поля
game_board = [1, 2, 3,  # Каждая цифра представляет клетку поля (нумерация от 1 до 9)
              4, 5, 6,  # Игроки будут заменять эти цифры на свои символы
              7, 8, 9]

# Инициализация победных линий
winning_lines = [[0, 1, 2],
                 [3, 4, 5],
                 [6, 7, 8],
                 [0, 3, 6],  #варианты победных комбинаций
                 [1, 4, 7],
                 [2, 5, 8],
                 [0, 4, 8],
                 [2, 4, 6]]


# Функция для вывода текущего состояния игрового поля
def print_board():
    """Выводит игровое поле на экран."""
    print(game_board[0], end=" ")  # Вывод 1-й клетки поля
    print(game_board[1], end=" ")  # Вывод 2-й клетки поля
    print(game_board[2])  # Вывод 3-й клетки поля и перенос на новую строку

    print(game_board[3], end=" ")
    print(game_board[4], end=" ")
    print(game_board[5])

    print(game_board[6], end=" ")
    print(game_board[7], end=" ")
    print(game_board[8])


# Функция для совершения хода игроком
def make_move(player_choice, symbol):
    """Делает ход на игровом поле."""
    if player_choice not in game_board:  # Проверка: занята ли клетка или неверный выбор
        print("Неверный ход. Попробуйте снова.")  # Сообщение об ошибке хода
        return False  # Возврат False, чтобы ход не засчитался
    index = game_board.index(player_choice)  # Находим индекс выбранной клетки
    game_board[index] = symbol  # Устанавливаем символ игрока в выбранную клетку
    return True  # Возвращаем True, если ход выполнен успешно


# Функция для определения победителя
def get_winner():
    """Определяет победителя."""
    for line in winning_lines:  # Проверяем каждую комбинацию победных линий
        if game_board[line[0]] == game_board[line[1]] == game_board[
            line[2]]:  # Если все три клетки содержат одинаковый символ
            return game_board[line[0]]  # Возвращаем победный символ (X или O)
    return None  # Если победителя нет, возвращаем None


# Функция для проверки ничьей
def is_draw():
    """Проверяет, закончилась ли игра ничьей."""
    return all(isinstance(x, str) for x in game_board)  # Если все клетки заполнены символами, игра заканчивается ничьей


# Функция для выбора игроком своего символа
def choose_symbol():
    """Позволяет игроку выбрать, за какой символ играть (X или O)."""
    symbol = ""  # Переменная для хранения выбора игрока
    while symbol not in ["X", "O"]:  # Пока игрок не выберет правильный символ
        symbol = input("Выберите ваш символ (X или O): ").upper()  # Запрашиваем символ у игрока
    return symbol  # Возвращаем выбранный символ


# Основная функция для запуска игры
def play_game():
    """Запускает игру."""
    player_symbol = choose_symbol()  # Игрок выбирает свой символ (X или O)
    computer_symbol = "O" if player_symbol == "X" else "X"  # Компьютер играет за другой символ

    current_player = player_symbol  # Начинаем игру с игрока
    game_over = False  # Игра продолжается, пока не будет победителя или ничьей

    while not game_over:  # Главный игровой цикл
        print_board()  # Выводим игровое поле

        # Ход текущего игрока
        player_choice = int(input(f"{current_player}, ваш ход (выберите клетку от 1 до 9): "))

        # Если ход сделан корректно
        if make_move(player_choice, current_player):
            winner = get_winner()  # Проверяем, есть ли победитель
            if winner:  # Если победитель найден
                game_over = True  # Игра завершается
                print_board()  # Выводим окончательное состояние игрового поля
                print(f"Победил {winner}!")  # Сообщаем о победе
            elif is_draw():  # Если все клетки заняты и нет победителя
                game_over = True  # Игра завершается
                print_board()  # Выводим окончательное состояние игрового поля
                print("Ничья!")  # Сообщаем о ничьей
            else:  # Если игра продолжается
                current_player = computer_symbol if current_player == player_symbol else player_symbol  # Меняем игрока


# Запуск игры
if __name__ == "__main__":
    play_game()  # Запускаем игру, если файл запущен как основной